version: "3.8"

services:
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - "../frontend/src:/frontend/src"
      - "/frontend/node_modules"
    environment:
      NODE_ENV: development
      CHOKIDAR_USEPOLLING: true
      WATCHPACK_POLLING: true
      FAST_REFRESH: true
      WDS_SOCKET_PORT: 0
    command: npm start
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: edunova
      DB_USER: postgres
      DB_PASSWORD: 2213Tb
      JWT_SECRET: mysecretkey
      JWT_EXPIRATION: 36000
      REDIS_HOST: redis
      REDIS_PORT: 6379
      NODE_ENV: development
    depends_on:
      - db
      - redis
    volumes:
      - ".:/app"
      - "/app/node_modules"
    command: npm run dev
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 2213Tb
      POSTGRES_DB: edunova
    ports:
      - "5432:5432"
    volumes:
      - "./db/init.sql:/docker-entrypoint-initdb.d/init.sql"
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  pgdata:
    driver: local

networks:
  app-network:
    driver: bridge